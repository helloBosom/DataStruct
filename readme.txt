参考了C++ Primer Plus第五版中文版 P8
C++实现                     源代码的扩展名
UNIX                       C、cc、cxx、c
GNU C++                    C、cc、cxx、cpp、c++
Borland C++                Cpp
Microsoft Visual C++       cpp、cxx、cc

数据结构:数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。
    逻辑结构:对数据之间关系的描述
	    线性结构:数据元素的有序集合  有序表 一对一  如:集合
		非线性结构   一对多：树形，图形
	存储结构:物理结构  逻辑结构的映象    顺序、链式、索引、散列
	    数据元素的表示
		关系的表示
	对数据的运算

算法:基本运算及规定的运算顺序所构成的完整的解题步骤。
    1.有穷性
    2.确定性
    3.输入
    4.输出
    5.可行性
算法的设计目标:
    1.正确性
    2.可读性
    3.健壮性
    4.高效率和低存储量需求
时间复杂度:
空间复杂度:在运行时所需存储空间的度量，主要考算法运行过程中临时占用的存储空间大小

线性表:线性表是具有相同特性数据元素的一个有限序列。
    只有一个表头元素
	只有一格表尾元素
	表头元素没有前驱
	表尾元素没有后继
	除表头元素表尾元素，其他元素只有一个直接前驱，也只有一个直接后继
	
线性表:
    顺序存储结构：顺序表
        1.随机访问特性
        2.占用连续的存储空间。   存储空间只能预选分配。
      顺序表做插入操作的时候要移动多个元素 		
	链式存储结构:链表    结点不仅包含所存储元素信息，还包含元素之间逻辑关系的信息。
	    1.不支持随机访问
		2.结点的存储空间利用率较顺序表稍低一些。
		3.链表支持存储空间的动态分配
	  链表中进行插入操作无须移动元素
	  1.单链表
	      1.1带头结点的单链表，头指针head指向头结点，头结点的值域不含任何信息，从头结点的后继结点开始存储数据信息。头指针head始终不等于NULL，
		  head->next等于NULL的时候，链表为空。
		  1.2不带头结点的单链表，头指针head直接指向开始结点，head为NULL的时候，链表为空。
		  头指针始终指向链表中的第一个结点
	  2.双链表
	      带头结点的双链表，当head->next为NULL时链表为空
		  不带头结点的双链表，当head为空时链表为空
	  3.循环单链表:将单链表的最后一个指针域指向链表中的第一个结点
	      带头结点的循环单链表，当head等于head->next时，链表为空
		  不带头结点的循环单链表，当head等于NULL时，链表为空
	  4.循环双链表
	      带头结点的循环双链表中没有空指针。判断循环双链表是否为空，只需检查head->next和head->prior两个指针中的任意一个是否等于head指针。
		      四种判断：
			      head->next==head;
				  head->prior==head;
				  head->next==head&&head->prior==head;
				  head->next==head||head->prior==head;
	      当head等于NULL时，不带头结点的循环双链表为空
	  5.静态链表
	      一般链表结点空间来自于整个内存，静态链表来自于一个结构体数组。
		  数组中每一个结点含有两个分量:
		      数据元素分量data
			  指针分量   指示了当前结点的直接后继结点在数组中的位置
	
指针所需的存储空间是系统分配的

栈:栈是一种只能在一端进行插入或删除操作的线性表。
    栈顶:允许插入和删除操作的一端。        栈顶指针指示器
	栈底:
	入栈
	出栈
    特性:先进后出(FILO)
    顺序栈:
	    栈空状态
		栈满状态
		非法状态(上溢和下溢,栈满继续入栈和栈空继续出栈)
		进栈、出栈
    链式栈:
        栈空
		栈满
		进栈
		出栈
	   
队列:一种操作受限制的线性表。     
    队尾:可进行插入的一端。(Rear)
	队头:可进行删除的一端。(Front)
	进队:
	出队:
    特性:先进先出(FIFO)  

循环队列:
    必须损失一个存储空间用于区分队满和队空。
    队空:
　　　　qu.rear=qu.front　
    队满:
	　　(qu.rear+1)%maxSize=front　
　　入队:
        qu.rear=(qu.rear+1)%maxSize;
		qu.data[qu.rear]=x;
	出队:
	    qu.front=(qu.front+1)%maxSize;
	    x=qu.data[qu.front];
	    
链队:
    采用链式存储结构存储队列
　　特点:
　　　　不存在队满上溢的情况(内存溢出上溢另算)
　　队空:
        lqu->rear=NULL或lqu->front=NULL
	队满:
        内存足够大的情况下不存在队满
    进队:
        lqu->rear->next=p;
        lqu->rear=p;
    出队:
        p=lqu->front;
        lqu->front=p->next;
        x=p->data;
        free(p);

串:零个或多个字符组成的有限序列
    
    		